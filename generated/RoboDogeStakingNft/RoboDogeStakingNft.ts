// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ItemAddedToTierCollection extends ethereum.Event {
  get params(): ItemAddedToTierCollection__Params {
    return new ItemAddedToTierCollection__Params(this);
  }
}

export class ItemAddedToTierCollection__Params {
  _event: ItemAddedToTierCollection;

  constructor(event: ItemAddedToTierCollection) {
    this._event = event;
  }

  get tier(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get image(): string {
    return this._event.parameters[1].value.toString();
  }

  get metadata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get count(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NFTClaimed extends ethereum.Event {
  get params(): NFTClaimed__Params {
    return new NFTClaimed__Params(this);
  }
}

export class NFTClaimed__Params {
  _event: NFTClaimed;

  constructor(event: NFTClaimed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tier(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metadata(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoboDogeStakingNft__tierCollectionResult {
  value0: string;
  value1: string;
  value2: BigInt;

  constructor(value0: string, value1: string, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class RoboDogeStakingNft__viewTierCollectionResultValue0Struct extends ethereum.Tuple {
  get image(): string {
    return this[0].toString();
  }

  get metadata(): string {
    return this[1].toString();
  }

  get count(): BigInt {
    return this[2].toBigInt();
  }
}

export class RoboDogeStakingNft extends ethereum.SmartContract {
  static bind(address: Address): RoboDogeStakingNft {
    return new RoboDogeStakingNft("RoboDogeStakingNft", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasClaimed(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "hasClaimed",
      "hasClaimed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasClaimed(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasClaimed",
      "hasClaimed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minimumStakeAmount(): BigInt {
    let result = super.call(
      "minimumStakeAmount",
      "minimumStakeAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumStakeAmount",
      "minimumStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumStakeDuration(): BigInt {
    let result = super.call(
      "minimumStakeDuration",
      "minimumStakeDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumStakeDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumStakeDuration",
      "minimumStakeDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tierCollection(
    param0: i32,
    param1: BigInt
  ): RoboDogeStakingNft__tierCollectionResult {
    let result = super.call(
      "tierCollection",
      "tierCollection(uint8,uint256):(string,string,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new RoboDogeStakingNft__tierCollectionResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt()
    );
  }

  try_tierCollection(
    param0: i32,
    param1: BigInt
  ): ethereum.CallResult<RoboDogeStakingNft__tierCollectionResult> {
    let result = super.tryCall(
      "tierCollection",
      "tierCollection(uint8,uint256):(string,string,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RoboDogeStakingNft__tierCollectionResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt()
      )
    );
  }

  tierUpperLimit(param0: i32): BigInt {
    let result = super.call(
      "tierUpperLimit",
      "tierUpperLimit(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toBigInt();
  }

  try_tierUpperLimit(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tierUpperLimit",
      "tierUpperLimit(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenIdCounter(): BigInt {
    let result = super.call("tokenIdCounter", "tokenIdCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenIdCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenIdCounter",
      "tokenIdCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  viewItemPosition(_hash: string): BigInt {
    let result = super.call(
      "viewItemPosition",
      "viewItemPosition(string):(uint256)",
      [ethereum.Value.fromString(_hash)]
    );

    return result[0].toBigInt();
  }

  try_viewItemPosition(_hash: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewItemPosition",
      "viewItemPosition(string):(uint256)",
      [ethereum.Value.fromString(_hash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewItemTier(_hash: string): i32 {
    let result = super.call("viewItemTier", "viewItemTier(string):(uint8)", [
      ethereum.Value.fromString(_hash)
    ]);

    return result[0].toI32();
  }

  try_viewItemTier(_hash: string): ethereum.CallResult<i32> {
    let result = super.tryCall("viewItemTier", "viewItemTier(string):(uint8)", [
      ethereum.Value.fromString(_hash)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  viewTierCollection(
    _tier: i32
  ): Array<RoboDogeStakingNft__viewTierCollectionResultValue0Struct> {
    let result = super.call(
      "viewTierCollection",
      "viewTierCollection(uint8):((string,string,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return result[0].toTupleArray<
      RoboDogeStakingNft__viewTierCollectionResultValue0Struct
    >();
  }

  try_viewTierCollection(
    _tier: i32
  ): ethereum.CallResult<
    Array<RoboDogeStakingNft__viewTierCollectionResultValue0Struct>
  > {
    let result = super.tryCall(
      "viewTierCollection",
      "viewTierCollection(uint8):((string,string,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        RoboDogeStakingNft__viewTierCollectionResultValue0Struct
      >()
    );
  }
}

export class AddToCollectionCall extends ethereum.Call {
  get inputs(): AddToCollectionCall__Inputs {
    return new AddToCollectionCall__Inputs(this);
  }

  get outputs(): AddToCollectionCall__Outputs {
    return new AddToCollectionCall__Outputs(this);
  }
}

export class AddToCollectionCall__Inputs {
  _call: AddToCollectionCall;

  constructor(call: AddToCollectionCall) {
    this._call = call;
  }

  get _hash(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _metadata(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _tier(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _count(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddToCollectionCall__Outputs {
  _call: AddToCollectionCall;

  constructor(call: AddToCollectionCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimNFTCall extends ethereum.Call {
  get inputs(): ClaimNFTCall__Inputs {
    return new ClaimNFTCall__Inputs(this);
  }

  get outputs(): ClaimNFTCall__Outputs {
    return new ClaimNFTCall__Outputs(this);
  }
}

export class ClaimNFTCall__Inputs {
  _call: ClaimNFTCall;

  constructor(call: ClaimNFTCall) {
    this._call = call;
  }

  get _stakeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimNFTCall__Outputs {
  _call: ClaimNFTCall;

  constructor(call: ClaimNFTCall) {
    this._call = call;
  }
}

export class RemoveFromCollectionCall extends ethereum.Call {
  get inputs(): RemoveFromCollectionCall__Inputs {
    return new RemoveFromCollectionCall__Inputs(this);
  }

  get outputs(): RemoveFromCollectionCall__Outputs {
    return new RemoveFromCollectionCall__Outputs(this);
  }
}

export class RemoveFromCollectionCall__Inputs {
  _call: RemoveFromCollectionCall;

  constructor(call: RemoveFromCollectionCall) {
    this._call = call;
  }

  get _tier(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveFromCollectionCall__Outputs {
  _call: RemoveFromCollectionCall;

  constructor(call: RemoveFromCollectionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _baseUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetMinimumStakeAmountCall extends ethereum.Call {
  get inputs(): SetMinimumStakeAmountCall__Inputs {
    return new SetMinimumStakeAmountCall__Inputs(this);
  }

  get outputs(): SetMinimumStakeAmountCall__Outputs {
    return new SetMinimumStakeAmountCall__Outputs(this);
  }
}

export class SetMinimumStakeAmountCall__Inputs {
  _call: SetMinimumStakeAmountCall;

  constructor(call: SetMinimumStakeAmountCall) {
    this._call = call;
  }

  get _minimumStakeAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumStakeAmountCall__Outputs {
  _call: SetMinimumStakeAmountCall;

  constructor(call: SetMinimumStakeAmountCall) {
    this._call = call;
  }
}

export class SetMinimumStakeDurationCall extends ethereum.Call {
  get inputs(): SetMinimumStakeDurationCall__Inputs {
    return new SetMinimumStakeDurationCall__Inputs(this);
  }

  get outputs(): SetMinimumStakeDurationCall__Outputs {
    return new SetMinimumStakeDurationCall__Outputs(this);
  }
}

export class SetMinimumStakeDurationCall__Inputs {
  _call: SetMinimumStakeDurationCall;

  constructor(call: SetMinimumStakeDurationCall) {
    this._call = call;
  }

  get _minimumStakeDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumStakeDurationCall__Outputs {
  _call: SetMinimumStakeDurationCall;

  constructor(call: SetMinimumStakeDurationCall) {
    this._call = call;
  }
}

export class SetTierUpperLimitCall extends ethereum.Call {
  get inputs(): SetTierUpperLimitCall__Inputs {
    return new SetTierUpperLimitCall__Inputs(this);
  }

  get outputs(): SetTierUpperLimitCall__Outputs {
    return new SetTierUpperLimitCall__Outputs(this);
  }
}

export class SetTierUpperLimitCall__Inputs {
  _call: SetTierUpperLimitCall;

  constructor(call: SetTierUpperLimitCall) {
    this._call = call;
  }

  get _tier(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _upperLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTierUpperLimitCall__Outputs {
  _call: SetTierUpperLimitCall;

  constructor(call: SetTierUpperLimitCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _staking(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
